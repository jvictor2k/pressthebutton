@using PressTheButton.Enums
@model PressTheButton.ViewModels.QuestionStatsViewModel

<div class="container">
    <div class="row justify-content-center align-items-center">
        <div class="card border-primary shadow text-center mt-3 w-auto h-auto">
            <div class="card-body">
                <div class="card-text" style="font-size: 26px;">@Html.DisplayFor(model => model.Question.Text)</div>
            </div>
        </div>

        <div class="text-center text-primary mt-3" style="font-size: 26px;"><strong>Mas...</strong></div>

        <div class="card border-primary shadow text-center mt-3 w-auto h-auto">
            <div class="card-body">
                <div class="card-text" style="font-size: 26px;">@Html.DisplayFor(model => model.Question.Negative)</div>
            </div>
        </div>

        <div class="text-center">
            <a asp-action="Index" class="btn btn-lg btn-primary mt-4 mb-4"><strong>PRÓXIMO</strong></a>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <b class="col-sm-6 text-start text-success">@Model.YesPercentage.ToString("0.00")%</b>
        <b class="col-sm-6 text-end text-danger">@Model.NoPercentage.ToString("0.00")%</b>
    </div>
</div>

<div class="progress">
    <div id="trueProgress" class="progress-bar progress-bar-striped progress-bar-animated bg-success" role="progressbar" style="width: @Model.YesPercentage.ToString("0")%;" aria-valuemin="0" aria-valuemax="100"></div>
    <div id="falseProgress" class="progress-bar progress-bar-striped progress-bar-animated bg-danger" role="progressbar" style="width: @Model.NoPercentage.ToString("0")%;" aria-valuemin="0" aria-valuemax="100"></div>
</div>


<p class="mt-5 text-center text-primary">Total de respostas: @Model.TotalResponses</p>

<p class="text-center text-success">Apertaram o botão: @Model.YesPercentage.ToString("0.00")%</p>

<p class="mb-5 text-center text-danger">Não apertaram o botão: @Model.NoPercentage.ToString("0.00")%</p>

<form id="commentForm" asp-controller="Question" asp-action="MakeComment" asp-route-questionId="@Model.Question.QuestionId" method="post">
    <div class="row align-items-center">
        <div class="col-auto">
            <img src="~/images/profilePicture/@Model.ProfilePicturePath" class="img-fixed-size-low" />
        </div>
        <div class="col">
            <div class="form-group flex-grow-1">
                <textarea placeholder="Comentar..." class="form-control" id="commentText" name="text" rows="1" style="resize: none"></textarea>
            </div>
        </div>
    </div>
    <div class="row justify-content-center align-items-center">
        <div class="text-center">
            <button type="submit" class="btn btn-primary mt-3">Comentar</button>
        </div>
    </div>
</form>

@await Component.InvokeAsync("Counter", Model.CommentsWithUserNames.Count() + Model.ReplysWithUserNames.Count())

<div>
    @if (Model.CommentsWithUserNames != null && Model.CommentsWithUserNames.Any())
    {
        <div class="container mt-4">
            @foreach (var (comment, userName, ratingValue) in Model.CommentsWithUserNames)
            {
                var commentId = comment.CommentId;
                var numberOfReplies = Model.ReplysWithUserNames.Count(tuple => tuple.Item1.CommentId == commentId);

                <div id="comment-@commentId">
                    @await Html.PartialAsync("_CommentPartial", new Tuple<Comment, string, RatingValue>(comment, userName, ratingValue))
                </div>
                
                if (numberOfReplies > 0)
                {
                    <button class="btn link-primary" style="text-decoration: none;" type="button" data-bs-toggle="collapse" data-bs-target="#replysCollapse_@comment.CommentId" aria-expanded="false" aria-controls="replysCollapse">
                        <strong>@numberOfReplies Respostas</strong>
                    </button>
                }
                <div class="collapse" id="replysCollapse_@comment.CommentId">
                    <div>
                        @foreach (var (reply, replyUserName) in Model.ReplysWithUserNames)
                        {
                            if (reply.CommentId == comment.CommentId)
                            {
                                @await Html.PartialAsync("_ReplyPartial", new Tuple<Reply, string>(reply, replyUserName))
                            }
                        }
                    </div>
                </div>
            }

            <script>
                function setupRatingButton(commentId) {
                    let form_like = document.getElementById("like-form-" + commentId);
                    let like_icon = document.getElementById("like-icon-" + commentId);
                    let form_dislike = document.getElementById("dislike-form-" + commentId)
                    let dislike_icon = document.getElementById("dislike-icon-" + commentId)

                    form_like.addEventListener('submit', (e) => {
                        e.preventDefault();
                        setClick(commentId, 'LikeComment');
                    });

                    form_dislike.addEventListener('submit', (e) => {
                        e.preventDefault();
                        setClick(commentId, 'DislikeComment');
                    });

                    function likeCounterSum(commentId) { 
                        let like_div = document.getElementById("rating-count-" + commentId);
                        let text = like_div.textContent;
                        let num = parseInt(text);
                        let newNum = num + 1;
                        like_div.textContent = newNum.toString();
                    }

                    function likeCounterSub(commentId) {
                        let like_div = document.getElementById("rating-count-" + commentId);
                        let text = like_div.textContent;
                        let num = parseInt(text);
                        let newNum = num - 1;
                        like_div.textContent = newNum.toString();
                    }

                    function toggleIcon(commentId, methodName) {
                        let dictionary = {
                            LikeComment: 'like-icon-',
                            DislikeComment: 'dislike-icon-'
                        }

                        let icon = document.getElementById(dictionary[methodName] + commentId);

                        let otherIconName = methodName === 'LikeComment' ? 'DislikeComment' : 'LikeComment';
                        let otherIcon = document.getElementById(dictionary[otherIconName] + commentId);

                        if (methodName === "LikeComment" && icon.classList.contains("fa-regular")) { 
                            likeCounterSum(commentId);
                        }

                        if (methodName === "LikeComment" && icon.classList.contains("fa-solid")) {
                            likeCounterSub(commentId);
                        }

                        if (methodName === "DislikeComment" && otherIcon.classList.contains("fa-solid")) {
                            likeCounterSub(commentId);
                        }

                        if (!icon.classList.contains("fa-solid")) {
                            otherIcon.classList.remove("fa-solid");
                            otherIcon.classList.add("fa-regular");
                        }

                        icon.classList.toggle("fa-regular");
                        icon.classList.toggle("fa-solid");
                    }

                    async function setClick(commentId, methodName) {
                        const response = await fetch(`/Question/${methodName}?commentId=${commentId}`, {
                            method: 'POST'
                        });
                        const data = await response.json();
                        if (response.ok) {
                            toggleIcon(commentId, methodName);
                        }
                    }
                }

                function toggleIconInit(commentId, ratingType) {
                    let dictionary = {
                        Like: 'like-icon-',
                        Dislike: 'dislike-icon-'
                    }

                    let icon = document.getElementById(dictionary[ratingType] + commentId);

                    icon.classList.toggle("fa-regular");
                    icon.classList.toggle("fa-solid");
                }

                @foreach (var (comment, userName, ratingValue) in Model.CommentsWithUserNames)
                {
                    var commentId = comment.CommentId;

                    if(ratingValue == RatingValue.Like || ratingValue == RatingValue.Dislike)
                    {
                        <text>
                            toggleIconInit('@commentId', '@ratingValue');
                        </text>
                    }

                    <text>
                        setupRatingButton('@commentId');
                    </text>
                }
            </script>
        </div>
    }
</div>

<script>
    document.getElementById('commentText').addEventListener('keydown', function (event) {
        if (event.keyCode === 13 && !event.shiftKey) {
            event.preventDefault();
            document.getElementById('commentForm').submit();
        }
    });

    let collapses = document.querySelectorAll('[id^="replyCollapse_"]');
    let btns = document.querySelectorAll(".btn-responder")
    btns.forEach((item) => {
        item.addEventListener('click', () => {
            closeAllCollapses(collapses)
        })
    })

    function closeAllCollapses(collapses) {
        collapses.forEach((item) => {
            item.classList.remove('show')
        })
    }
</script>